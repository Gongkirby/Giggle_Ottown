Index: src/main/java/model/domain/Consumer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.domain;\n\nimport java.sql.Timestamp;\n\npublic class Consumer {\n    private Long consumerId;\n    private String email;\n    private String password;\n    private String consumerName;\n    private int loginType;\n    private Timestamp updateDate;\n    private Timestamp joinDate;\n\n    // 기본 생성자\n    public Consumer() {\n        // 생성 시점에 현재 시간을 초기화\n        this.updateDate = new Timestamp(System.currentTimeMillis());\n        this.joinDate = new Timestamp(System.currentTimeMillis());\n    }\n\n    // 매개변수 생성자\n    public Consumer(Long consumerId, String email, String password) {\n        this.consumerId = consumerId;\n        this.email = email;\n        this.password = password;\n        // 생성 시점에 현재 시간을 초기화\n        this.updateDate = new Timestamp(System.currentTimeMillis());\n        this.joinDate = new Timestamp(System.currentTimeMillis());\n    }\n\n    // Getter and Setter for consumerId\n    public Long getConsumerId() {\n        return consumerId;\n    }\n\n    public void setConsumerId(Long consumerId) {\n        this.consumerId = consumerId;\n    }\n\n    // Getter and Setter for consumerName\n    public String getConsumerName() {\n        return consumerName;\n    }\n\n    public void setConsumerName(String consumerName) {\n        this.consumerName = consumerName;\n    }\n\n    // Getter and Setter for loginType\n    public int getLoginType() {\n        return loginType;\n    }\n\n    public void setLoginType(int loginType) {\n        this.loginType = loginType;\n    }\n\n    // Getter and Setter for updateDate\n    public Timestamp getUpdateDate() {\n        return updateDate;\n    }\n\n    public void setUpdateDate(Timestamp updateDate) {\n        this.updateDate = updateDate;\n    }\n\n    public Timestamp getJoinDate() {\n        return joinDate;\n    }\n\n    public void setJoinDate(Timestamp joinDate) {\n        this.joinDate = joinDate;\n    }\n\n    // Getter and Setter for password\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/domain/Consumer.java b/src/main/java/model/domain/Consumer.java
--- a/src/main/java/model/domain/Consumer.java	(revision d233a3be79840564d9e3418fe287fd11281da432)
+++ b/src/main/java/model/domain/Consumer.java	(date 1734429592788)
@@ -1,5 +1,6 @@
 package model.domain;
 
+import java.sql.Date;
 import java.sql.Timestamp;
 
 public class Consumer {
@@ -8,14 +9,14 @@
     private String password;
     private String consumerName;
     private int loginType;
-    private Timestamp updateDate;
-    private Timestamp joinDate;
+    private Date updateDate;
+    private Date joinDate;
 
     // 기본 생성자
     public Consumer() {
         // 생성 시점에 현재 시간을 초기화
-        this.updateDate = new Timestamp(System.currentTimeMillis());
-        this.joinDate = new Timestamp(System.currentTimeMillis());
+        this.updateDate = new Date(System.currentTimeMillis());
+        this.joinDate = new Date(System.currentTimeMillis());
     }
 
     // 매개변수 생성자
@@ -24,8 +25,8 @@
         this.email = email;
         this.password = password;
         // 생성 시점에 현재 시간을 초기화
-        this.updateDate = new Timestamp(System.currentTimeMillis());
-        this.joinDate = new Timestamp(System.currentTimeMillis());
+        this.updateDate = new Date(System.currentTimeMillis());
+        this.joinDate = new Date(System.currentTimeMillis());
     }
 
     // Getter and Setter for consumerId
@@ -56,19 +57,19 @@
     }
 
     // Getter and Setter for updateDate
-    public Timestamp getUpdateDate() {
+    public Date getUpdateDate() {
         return updateDate;
     }
 
-    public void setUpdateDate(Timestamp updateDate) {
+    public void setUpdateDate(Date updateDate) {
         this.updateDate = updateDate;
     }
 
-    public Timestamp getJoinDate() {
+    public Date getJoinDate() {
         return joinDate;
     }
 
-    public void setJoinDate(Timestamp joinDate) {
+    public void setJoinDate(Date joinDate) {
         this.joinDate = joinDate;
     }
 
Index: src/main/java/controller/consumer/LoginController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller.consumer;\n\nimport controller.Controller;\nimport model.dao.consumer.ConsumerDao;\nimport model.domain.Consumer;\n\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.io.IOException;\nimport java.sql.SQLException;\n\npublic class LoginController implements Controller {\n    private final ConsumerDao consumerDao = new ConsumerDao();\n\n    @Override\n    public String execute(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String method = request.getMethod();\n\n        if (\"POST\".equalsIgnoreCase(method)) {\n            handlePost(request, response);\n        } else if (\"GET\".equalsIgnoreCase(method)) {\n            handleGet(request, response);\n        }\n        return null; // 응답은 메서드 내에서 처리하므로 null 반환\n    }\n\n    // POST 방식 처리 (로그인 처리)\n    private void handlePost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String loginId = request.getParameter(\"email\");\n        String password = request.getParameter(\"password\");\n\n        System.out.println(\"Login ID: \" + loginId);\n        System.out.println(\"Password: \" + password);\n\n        try {\n            Consumer consumer = consumerDao.findByLoginIdAndPassword(loginId, password);\n            if (consumer != null) {\n                // 로그인 성공 처리\n                System.out.println(\"Login successful for user: \" + loginId);\n\n                // 세션에 사용자 ID 저장\n                HttpSession session = request.getSession();\n                session.setAttribute(UserSessionUtils.USER_SESSION_KEY, consumer.getConsumerId());\n\n                // 로그인 에러 메시지 제거\n                request.removeAttribute(\"loginError\");\n                response.sendRedirect(request.getContextPath() + \"/startpage/startpage.jsp\"); // 메인 페이지로 리디렉션\n            } else {\n                // 로그인 실패 처리\n                handleLoginError(request, response, loginId);\n            }\n        } catch (SQLException e) {\n            throw new ServletException(\"Database error during login\", e);\n        }\n    }\n\n    // GET 방식 처리 (로그인 폼 페이지로 이동)\n    private void handleGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        RequestDispatcher dispatcher = request.getRequestDispatcher(\"/loginForm/login.jsp\");\n        dispatcher.forward(request, response);\n    }\n\n    // 로그인 실패 처리\n    private void handleLoginError(HttpServletRequest request, HttpServletResponse response, String loginId) throws ServletException, IOException {\n        System.out.println(\"Login failed for user: \" + loginId);\n        request.setAttribute(\"loginError\", true);\n        RequestDispatcher dispatcher = request.getRequestDispatcher(\"/loginForm/login.jsp\");\n        dispatcher.forward(request, response);\n    }\n}\n
===================================================================
diff --git a/src/main/java/controller/consumer/LoginController.java b/src/main/java/controller/consumer/LoginController.java
--- a/src/main/java/controller/consumer/LoginController.java	(revision d233a3be79840564d9e3418fe287fd11281da432)
+++ b/src/main/java/controller/consumer/LoginController.java	(date 1734429546502)
@@ -2,6 +2,7 @@
 
 import controller.Controller;
 import model.dao.consumer.ConsumerDao;
+import model.domain.Account;
 import model.domain.Consumer;
 
 import javax.servlet.RequestDispatcher;
@@ -36,14 +37,14 @@
         System.out.println("Password: " + password);
 
         try {
-            Consumer consumer = consumerDao.findByLoginIdAndPassword(loginId, password);
-            if (consumer != null) {
+            Consumer Consumer = consumerDao.findByLoginIdAndPassword(loginId, password);
+            if (Consumer != null) {
                 // 로그인 성공 처리
-                System.out.println("Login successful for user: " + loginId);
+                System.out.println("로그인 성공: " + loginId);
 
                 // 세션에 사용자 ID 저장
                 HttpSession session = request.getSession();
-                session.setAttribute(UserSessionUtils.USER_SESSION_KEY, consumer.getConsumerId());
+                session.setAttribute(UserSessionUtils.USER_SESSION_KEY, Consumer.getConsumerId());
 
                 // 로그인 에러 메시지 제거
                 request.removeAttribute("loginError");
@@ -65,7 +66,7 @@
 
     // 로그인 실패 처리
     private void handleLoginError(HttpServletRequest request, HttpServletResponse response, String loginId) throws ServletException, IOException {
-        System.out.println("Login failed for user: " + loginId);
+        System.out.println("로그인 실패: " + loginId);
         request.setAttribute("loginError", true);
         RequestDispatcher dispatcher = request.getRequestDispatcher("/loginForm/login.jsp");
         dispatcher.forward(request, response);
Index: src/main/java/model/dao/consumer/ConsumerDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.dao.consumer;\n\nimport model.dao.JDBCUtil;\nimport model.domain.Consumer;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\n\npublic class ConsumerDao {\n    private JDBCUtil jdbcUtil = null;\n\n    public ConsumerDao() {\n        jdbcUtil = new JDBCUtil(); // JDBCUtil 객체 생성\n    }\n\n    // 회원 생성 (회원가입)\n    public boolean create(Consumer consumer) throws SQLException {\n        String sql = \"INSERT INTO CONSUMER (CONSUMER_ID, CONSUMER_NAME, LOGIN_TYPE, UPDATE_DATE, JOIN_DATE) VALUES (SEQ_CONSUMER.NEXTVAL, ?, ?, ?, ?)\";\n        Object[] param = {\n                consumer.getConsumerName(),\n                consumer.getLoginType(),\n                consumer.getUpdateDate(),\n                consumer.getJoinDate()\n        };\n\n        try {\n            // CONSUMER 삽입 실행\n            jdbcUtil.setSqlAndParameters(sql, param);\n            int result = jdbcUtil.executeUpdate();\n\n            if (result > 0) {\n                // CONSUMER_ID를 CURRVAL로 가져오기\n                String consumerIdQuery = \"SELECT SEQ_CONSUMER.CURRVAL FROM DUAL\";\n                jdbcUtil.setSqlAndParameters(consumerIdQuery, null);\n                try (ResultSet rs = jdbcUtil.executeQuery()) {\n                    if (rs.next()) {\n                        consumer.setConsumerId(rs.getLong(1)); // CURRVAL을 consumer에 설정\n                    }\n                }\n\n                // 로그인 타입이 0이면 Account 테이블에 삽입\n                if (consumer.getLoginType() == 0) {\n                    String accountSql = \"INSERT INTO ACCOUNT (LOGIN_ID, CONSUMER_ID, LOGIN_PASSWORD, CONSUMER_EMAIL) \" +\n                            \"VALUES (?, ?, ?, ?)\";\n                    Object[] accountParam = {\n                            consumer.getConsumerName(),  // LOGIN_ID\n                            consumer.getConsumerId(),    // CONSUMER_ID\n                            consumer.getPassword(),      // LOGIN_PASSWORD\n                            consumer.getEmail()          // CONSUMER_EMAIL\n                    };\n                    jdbcUtil.setSqlAndParameters(accountSql, accountParam);\n                    int accountResult = jdbcUtil.executeUpdate();\n                    if (accountResult > 0) {\n                        return true; // ACCOUNT INSERT 성공 시 true 반환\n                    } else {\n                        jdbcUtil.rollback();\n                        return false; // ACCOUNT INSERT 실패 시 false 반환\n                    }\n                }\n            }\n            return false; // CONSUMER INSERT 실패 시 false 반환\n        } catch (SQLException e) {\n            jdbcUtil.rollback();\n            throw e;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            jdbcUtil.commit();\n            jdbcUtil.close();\n        }\n    }\n\n    //로그인\n    public Consumer findByLoginIdAndPassword(String loginId, String password) throws SQLException {\n        // 1. ACCOUNT 테이블에서 로그인 정보 확인\n        String accountSql = \"SELECT CONSUMER_ID, LOGIN_PASSWORD, CONSUMER_EMAIL \" +\n                \"FROM ACCOUNT WHERE LOGIN_ID = ? AND LOGIN_PASSWORD = ?\";\n\n        Object[] accountParam = {loginId, password};\n        jdbcUtil.setSqlAndParameters(accountSql, accountParam);\n\n        try (ResultSet rs = jdbcUtil.executeQuery()) {\n            if (rs.next()) {\n                long consumerId = rs.getLong(\"CONSUMER_ID\");\n                // 로그인 정보가 일치하면 CONSUMER_ID를 사용해 CONSUMER 정보를 가져옴\n                return getConsumerById(consumerId);\n            }\n            return null; // 일치하는 로그인 정보가 없으면 null 반환\n        }\n    }\n\n    // CONSUMER_ID를 통해 CONSUMER 정보를 가져오는 메서드\n    private Consumer getConsumerById(long consumerId) throws SQLException {\n        String consumerSql = \"SELECT CONSUMER_ID, CONSUMER_NAME, LOGIN_TYPE, CONSUMER_EMAIL \" +\n                \"FROM CONSUMER WHERE CONSUMER_ID = ?\";\n\n        Object[] consumerParam = {consumerId};\n        jdbcUtil.setSqlAndParameters(consumerSql, consumerParam);\n\n        try (ResultSet rs = jdbcUtil.executeQuery()) {\n            if (rs.next()) {\n                Consumer consumer = new Consumer();\n                consumer.setConsumerId(rs.getLong(\"CONSUMER_ID\"));\n                consumer.setConsumerName(rs.getString(\"CONSUMER_NAME\"));\n                consumer.setLoginType(rs.getInt(\"LOGIN_TYPE\"));\n                consumer.setEmail(rs.getString(\"CONSUMER_EMAIL\"));\n                return consumer;\n            }\n            return null; // 일치하는 CONSUMER 정보가 없으면 null 반환\n        }\n    }\n\n\n//    // 비밀번호 수정\n//    public int updatePassword(Consumer consumer) throws SQLException {\n//        String sql = \"UPDATE ACCOUNT \" +\n//                \"SET LOGIN_PASSWORD = ? \" +\n//                \"WHERE CONSUMER_ID = ?\";\n//        Object[] param = new Object[] {\n//                consumer.getPassword(),\n//                consumer.getConsumerId()\n//        };\n//        jdbcUtil.setSqlAndParameters(sql, param);\n//\n//        try {\n//            int result = jdbcUtil.executeUpdate(); // UPDATE 문 실행\n//            return result;\n//        } catch (SQLException e) {\n//            jdbcUtil.rollback();\n//            throw e; // 예외를 상위 호출자에게 전달\n//        } catch (Exception ex) {\n//            throw new RuntimeException(ex);\n//        } finally {\n//            jdbcUtil.commit();\n//            jdbcUtil.close(); // 리소스 반환\n//        }\n//    }\n//\n//    // 회원 삭제\n//    public int remove(String consumerId) throws SQLException {\n//        String sql = \"DELETE FROM CONSUMER WHERE CONSUMER_ID = ?\";\n//        jdbcUtil.setSqlAndParameters(sql, new Object[] { consumerId }); // DELETE 문과 매개 변수 설정\n//\n//        try {\n//            int result = jdbcUtil.executeUpdate(); // DELETE 문 실행\n//            return result;\n//        } catch (Exception ex) {\n//            jdbcUtil.rollback();\n//            ex.printStackTrace();\n//        } finally {\n//            jdbcUtil.commit();\n//            jdbcUtil.close(); // 리소스 반환\n//        }\n//        return 0;\n//    }\n//\n//    // 회원 ID로 회원 정보 조회\n//    public Consumer findConsumer(String consumerId) throws SQLException {\n//        String query = \"SELECT * FROM CONSUMER WHERE CONSUMER_ID = ?\";\n//        jdbcUtil.setSqlAndParameters(query, new Object[] { consumerId });\n//\n//        try {\n//            ResultSet rs = jdbcUtil.executeQuery();\n//            while (rs.next()) {\n//                Consumer consumer = new Consumer(\n//                        rs.getLong(\"CONSUMER_ID\"),  // 오라클 컬럼명에 맞게 수정\n//                        rs.getString(\"EMAIL\"),      // 오라클 컬럼명에 맞게 수정\n//                        rs.getString(\"PASSWORD\")    // 오라클 컬럼명에 맞게 수정\n//                );\n//                return consumer;\n//            }\n//        } catch (SQLException e) {\n//            e.printStackTrace(); // 오류 처리\n//        } finally {\n//            jdbcUtil.close(); // 리소스 반환\n//        }\n//        return null;\n//    }\n//\n//    // 마이페이지 정보 조회\n//    public Consumer findProfile(String consumerId) throws SQLException {\n//        String query = \"SELECT CONSUMER_NAME, EMAIL, PASSWORD FROM CONSUMER WHERE CONSUMER_ID = ?\";\n//        jdbcUtil.setSqlAndParameters(query, new Object[] { consumerId });\n//\n//        try {\n//            ResultSet rs = jdbcUtil.executeQuery();\n//            if (rs.next()) {\n//                // Consumer 객체 생성 및 필드 설정\n//                Consumer consumer = new Consumer();\n//                consumer.setConsumerName(rs.getString(\"CONSUMER_NAME\")); // 컬럼명 수정\n//                consumer.setEmail(rs.getString(\"EMAIL\"));                // 컬럼명 수정\n//                consumer.setPassword(rs.getString(\"PASSWORD\"));          // 컬럼명 수정\n//\n//                return consumer;\n//            }\n//        } catch (SQLException e) {\n//            e.printStackTrace(); // 예외 처리\n//        } finally {\n//            jdbcUtil.close(); // 리소스 반환\n//        }\n//        return null; // 정보가 없을 경우 null 반환\n//    }\n}\n
===================================================================
diff --git a/src/main/java/model/dao/consumer/ConsumerDao.java b/src/main/java/model/dao/consumer/ConsumerDao.java
--- a/src/main/java/model/dao/consumer/ConsumerDao.java	(revision d233a3be79840564d9e3418fe287fd11281da432)
+++ b/src/main/java/model/dao/consumer/ConsumerDao.java	(date 1734429531420)
@@ -5,7 +5,6 @@
 
 import java.sql.ResultSet;
 import java.sql.SQLException;
-import java.sql.Timestamp;
 
 public class ConsumerDao {
     private JDBCUtil jdbcUtil = null;
@@ -71,19 +70,24 @@
         }
     }
 
-    //로그인
     public Consumer findByLoginIdAndPassword(String loginId, String password) throws SQLException {
-        // 1. ACCOUNT 테이블에서 로그인 정보 확인
-        String accountSql = "SELECT CONSUMER_ID, LOGIN_PASSWORD, CONSUMER_EMAIL " +
-                "FROM ACCOUNT WHERE LOGIN_ID = ? AND LOGIN_PASSWORD = ?";
+        // 1. ACCOUNT 테이블에서 이메일과 비밀번호 확인
+        String accountSql = "SELECT CONSUMER_ID " +
+                "FROM ACCOUNT WHERE CONSUMER_EMAIL = ? AND LOGIN_PASSWORD = ?";
 
+        // 입력된 loginId를 CONSUMER_EMAIL, password를 LOGIN_PASSWORD와 비교
         Object[] accountParam = {loginId, password};
         jdbcUtil.setSqlAndParameters(accountSql, accountParam);
 
         try (ResultSet rs = jdbcUtil.executeQuery()) {
+            if(rs == null) {
+                System.out.println("rs is null");
+            }
             if (rs.next()) {
+                // 로그인 정보가 일치하면 CONSUMER_ID를 가져옴
                 long consumerId = rs.getLong("CONSUMER_ID");
-                // 로그인 정보가 일치하면 CONSUMER_ID를 사용해 CONSUMER 정보를 가져옴
+
+                // CONSUMER_ID를 사용해 CONSUMER 정보를 가져옴
                 return getConsumerById(consumerId);
             }
             return null; // 일치하는 로그인 정보가 없으면 null 반환
@@ -92,7 +96,7 @@
 
     // CONSUMER_ID를 통해 CONSUMER 정보를 가져오는 메서드
     private Consumer getConsumerById(long consumerId) throws SQLException {
-        String consumerSql = "SELECT CONSUMER_ID, CONSUMER_NAME, LOGIN_TYPE, CONSUMER_EMAIL " +
+        String consumerSql = "SELECT CONSUMER_ID, CONSUMER_NAME, JOIN_DATE, UPDATE_DATE, LOGIN_TYPE " +
                 "FROM CONSUMER WHERE CONSUMER_ID = ?";
 
         Object[] consumerParam = {consumerId};
@@ -100,11 +104,17 @@
 
         try (ResultSet rs = jdbcUtil.executeQuery()) {
             if (rs.next()) {
+                // Consumer 객체 생성
                 Consumer consumer = new Consumer();
+
+                // CONSUMER 정보를 Consumer 객체에 세팅
                 consumer.setConsumerId(rs.getLong("CONSUMER_ID"));
                 consumer.setConsumerName(rs.getString("CONSUMER_NAME"));
+                consumer.setJoinDate(rs.getDate("JOIN_DATE"));
+                consumer.setUpdateDate(rs.getDate("UPDATE_DATE"));
                 consumer.setLoginType(rs.getInt("LOGIN_TYPE"));
-                consumer.setEmail(rs.getString("CONSUMER_EMAIL"));
+
+                // 세팅된 Consumer 객체 반환
                 return consumer;
             }
             return null; // 일치하는 CONSUMER 정보가 없으면 null 반환
@@ -112,6 +122,9 @@
     }
 
 
+
+
+
 //    // 비밀번호 수정
 //    public int updatePassword(Consumer consumer) throws SQLException {
 //        String sql = "UPDATE ACCOUNT " +
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"MavenProjectsManager\">\n    <option name=\"originalFiles\">\n      <list>\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_23\" default=\"true\" project-jdk-name=\"openjdk-23\" project-jdk-type=\"JavaSDK\" />\n</project>
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision d233a3be79840564d9e3418fe287fd11281da432)
+++ b/.idea/misc.xml	(date 1734427396788)
@@ -8,5 +8,7 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="openjdk-23" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="openjdk-23" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/classes" />
+  </component>
 </project>
\ No newline at end of file
